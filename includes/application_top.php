<?php/*  $Id: application_top.php 1833 2008-01-30 22:03:30Z hpdl $  osCommerce, Open Source E-Commerce Solutions  http://www.oscommerce.com  Copyright (c) 2008 osCommerce  Released under the GNU General Public License*/global $customer_procent;// start the timer for the page parse time log  define('PAGE_PARSE_START_TIME', microtime());// set the level of error reporting  ini_set('display_errors',1);  error_reporting(E_ALL & ~E_NOTICE);// check support for register_globals  if (function_exists('ini_get') && (ini_get('register_globals') == false) && (PHP_VERSION < 4.3) ) {    exit('Server Requirement Error: register_globals is disabled in your PHP configuration. This can be enabled in your php.ini configuration file or in the .htaccess file in your catalog directory. Please use PHP 4.3+ if register_globals cannot be enabled on the server.');  }// Set the local configuration parameters - mainly for developers  if (file_exists('includes/local/configure.php')) include('includes/local/configure.php');// include server parameters  require('includes/configure.php');  if (strlen(DB_SERVER) < 1) {    if (is_dir('install')) {      header('Location: install/index.php');    }  }// define the project version  define('PROJECT_VERSION', 'osCommerce Online Merchant v2.2 RC2a');// some code to solve compatibility issues  require(DIR_WS_FUNCTIONS . 'compatibility.php');// set the type of request (secure or not)  $request_type = (getenv('HTTPS') == 'on') ? 'SSL' : 'NONSSL';  /**   * USU5 function to return the base filename    */   function usu5_base_filename() {     // Probably won't get past SCRIPT_NAME unless this is reporting cgi location     $base = new ArrayIterator( array( 'SCRIPT_NAME', 'PHP_SELF', 'REQUEST_URI', 'ORIG_PATH_INFO', 'HTTP_X_ORIGINAL_URL', 'HTTP_X_REWRITE_URL' ) );     while ( $base->valid() ) {       if ( array_key_exists(  $base->current(), $_SERVER ) && !empty(  $_SERVER[$base->current()] ) ) {         if ( false !== strpos( $_SERVER[$base->current()], '.php' ) ) {           preg_match( '@[a-z0-9_]+\.php@i', $_SERVER[$base->current()], $matches );           if ( is_array( $matches ) && ( array_key_exists( 0, $matches ) )                                     && ( substr( $matches[0], -4, 4 ) == '.php' )                                     && ( is_readable( $matches[0] ) || ( false !== strpos( $_SERVER[$base->current()], 'ext/modules/' ) ) ) ) {             return $matches[0];           }          }        }       $base->next();     }     // Some odd server set ups return / for SCRIPT_NAME and PHP_SELF when accessed as mysite.com (no index.php) where they usually return /index.php     if ( ( $_SERVER['SCRIPT_NAME'] == '/' ) || ( $_SERVER['PHP_SELF'] == '/' ) ) {       return 'index.php';     }      trigger_error( 'USU5 could not find a valid base filename, please inform the developer.', E_USER_WARNING );   } // End function // set php_self in the local scope   $PHP_SELF = usu5_base_filename();   // Security Pro by FWR Media    include_once DIR_WS_MODULES . 'fwr_media_security_pro.php';  $security_pro = new Fwr_Media_Security_Pro;  // If you need to exclude a file from cleansing then you can add it like below  //$security_pro->addExclusion( 'some_file.php' );  //$security_pro->cleanse( $PHP_SELF );  // End - Security Pro by FWR Media    if ($request_type == 'NONSSL') {    define('DIR_WS_CATALOG', DIR_WS_HTTP_CATALOG);  } else {    define('DIR_WS_CATALOG', DIR_WS_HTTPS_CATALOG);  }// include the list of project filenames  require(DIR_WS_INCLUDES . 'filenames.php');// include the list of project database tables  require(DIR_WS_INCLUDES . 'database_tables.php');// customization for the design layout  define('BOX_WIDTH', 230); // how wide the boxes should be in pixels (default: 125)// include the database functions  require(DIR_WS_FUNCTIONS . 'database.php');// make a connection to the database... now  tep_db_connect() or die('Unable to connect to database server!');// set the application parameters//  $configuration_query = tep_db_query('select configuration_key as cfgKey, configuration_value as cfgValue from ' . TABLE_CONFIGURATION);//  while ($configuration = tep_db_fetch_array($configuration_query)) {//    define($configuration['cfgKey'], $configuration['cfgValue']);//  }// set application wide parameters// Configuration Cache modification start  require ('includes/configuration_cache_read.php');// Configuration Cache modification end// if gzip_compression is enabled, start to buffer the output  if ( (GZIP_COMPRESSION == 'true') && ($ext_zlib_loaded = extension_loaded('zlib')) && (PHP_VERSION >= '4') ) {    if (($ini_zlib_output_compression = (int)ini_get('zlib.output_compression')) < 1) {      if (PHP_VERSION >= '4.0.4') {        ob_start('ob_gzhandler');      } else {        include(DIR_WS_FUNCTIONS . 'gzip_compression.php');        ob_start();        ob_implicit_flush();      }    } else {      ini_set('zlib.output_compression_level', GZIP_LEVEL);    }  }// set the HTTP GET parameters manually if search_engine_friendly_urls is enabled  if (SEARCH_ENGINE_FRIENDLY_URLS == 'true') {    if (strlen(getenv('PATH_INFO')) > 1) {      $GET_array = array();      $PHP_SELF = str_replace(getenv('PATH_INFO'), '', $PHP_SELF);      $vars = explode('/', substr(getenv('PATH_INFO'), 1));      for ($i=0, $n=sizeof($vars); $i<$n; $i++) {        if (strpos($vars[$i], '[]')) {          $GET_array[substr($vars[$i], 0, -2)][] = $vars[$i+1];        } else {          $_GET[$vars[$i]] = $vars[$i+1];        }        $i++;      }      if (sizeof($GET_array) > 0) {        while (list($key, $value) = each($GET_array)) {          $_GET[$key] = $value;        }      }    }  }// define general functions used application-wide  require(DIR_WS_FUNCTIONS . 'general.php');  require(DIR_WS_FUNCTIONS . 'html_output.php');// set the cookie domain  $cookie_domain = (($request_type == 'NONSSL') ? HTTP_COOKIE_DOMAIN : HTTPS_COOKIE_DOMAIN);  $cookie_path = (($request_type == 'NONSSL') ? HTTP_COOKIE_PATH : HTTPS_COOKIE_PATH);// include cache functions if enabled  if (USE_CACHE == 'true') include(DIR_WS_FUNCTIONS . 'cache.php');// include shopping cart class  require(DIR_WS_CLASSES . 'shopping_cart.php');// include easy discount products class  require(DIR_WS_CLASSES . 'easy_discount.php');// include navigation history class  require(DIR_WS_CLASSES . 'navigation_history.php');// check if sessions are supported, otherwise use the php3 compatible session class  if (!function_exists('session_start')) {      define('PHP_SESSION_NAME', 'osCsid');    define('PHP_SESSION_PATH', $cookie_path);    define('PHP_SESSION_DOMAIN', $cookie_domain);    define('PHP_SESSION_SAVE_PATH', SESSION_WRITE_DIRECTORY);    include(DIR_WS_CLASSES . 'sessions.php');  }// define how the session functions will be used  require(DIR_WS_FUNCTIONS . 'sessions.php');// set the session name and save path  tep_session_name('osCsid');  tep_session_save_path(SESSION_WRITE_DIRECTORY);// set the session cookie parameters   if (function_exists('session_set_cookie_params')) {    session_set_cookie_params(0, $cookie_path, $cookie_domain);  } elseif (function_exists('ini_set')) {    ini_set('session.cookie_lifetime', '0');    ini_set('session.cookie_path', $cookie_path);    ini_set('session.cookie_domain', $cookie_domain);  }// set the session ID if it exists   if (isset($_POST[tep_session_name()])) {     tep_session_id($_POST[tep_session_name()]);   } elseif ( ($request_type == 'SSL') && isset($_GET[tep_session_name()]) ) {     tep_session_id($_GET[tep_session_name()]);   }// start the session  $session_started = false;  if (SESSION_FORCE_COOKIE_USE == 'True') {    tep_setcookie('cookie_test', 'please_accept_for_session', time()+60*60*24*30, $cookie_path, $cookie_domain);    if (isset($_COOKIE['cookie_test'])) {      tep_session_start();      $session_started = true;    }  } elseif (SESSION_BLOCK_SPIDERS == 'True') {    $user_agent = strtolower(getenv('HTTP_USER_AGENT'));    $spider_flag = false;    if (tep_not_null($user_agent)) {      $spiders = file(DIR_WS_INCLUDES . 'spiders.txt');      for ($i=0, $n=sizeof($spiders); $i<$n; $i++) {        if (tep_not_null($spiders[$i])) {          if (is_integer(strpos($user_agent, trim($spiders[$i])))) {            $spider_flag = true;            break;          }        }      }    }    if ($spider_flag == false) {      tep_session_start();      $session_started = true;    }  } else {    tep_session_start();    $session_started = true;  }  if ( ($session_started == true) && (PHP_VERSION >= 4.3) && function_exists('ini_get') && (ini_get('register_globals') == false) ) {    extract($_SESSION, EXTR_OVERWRITE+EXTR_REFS);  }// set SID once, even if empty  $SID = (defined('SID') ? SID : '');  // verify the ssl_session_id if the feature is enabled  if ( ($request_type == 'SSL') && (SESSION_CHECK_SSL_SESSION_ID == 'True') && (ENABLE_SSL == true) && ($session_started == true) ) {    $ssl_session_id = getenv('SSL_SESSION_ID');    if (!tep_session_is_registered('SSL_SESSION_ID')) {      $SESSION_SSL_ID = $ssl_session_id;      tep_session_register('SESSION_SSL_ID');    }    if ($SESSION_SSL_ID != $ssl_session_id) {      tep_session_destroy();      tep_redirect(tep_href_link(FILENAME_SSL_CHECK));    }  }// verify the browser user agent if the feature is enabled  if (SESSION_CHECK_USER_AGENT == 'True') {    $http_user_agent = getenv('HTTP_USER_AGENT');    if (!tep_session_is_registered('SESSION_USER_AGENT')) {      $SESSION_USER_AGENT = $http_user_agent;      tep_session_register('SESSION_USER_AGENT');    }    if ($SESSION_USER_AGENT != $http_user_agent) {      tep_session_destroy();      tep_redirect(tep_href_link(FILENAME_LOGIN));    }  }// verify the IP address if the feature is enabled  if (SESSION_CHECK_IP_ADDRESS == 'True') {    $ip_address = tep_get_ip_address();    if (!tep_session_is_registered('SESSION_IP_ADDRESS')) {      $SESSION_IP_ADDRESS = $ip_address;      tep_session_register('SESSION_IP_ADDRESS');    }    if ($SESSION_IP_ADDRESS != $ip_address) {      tep_session_destroy();      tep_redirect(tep_href_link(FILENAME_LOGIN));    }  }// create the shopping cart & fix the cart if necesary  if (tep_session_is_registered('cart') && is_object($cart)) {    if (PHP_VERSION < 4) {      $broken_cart = $cart;      $cart = new shoppingCart;      $cart->unserialize($broken_cart);    }  } else {    tep_session_register('cart');    $cart = new shoppingCart;  }// include currencies class and create an instance  require(DIR_WS_CLASSES . 'currencies.php');  $currencies = new currencies();if (!tep_session_is_registered('easy_discount')) {  tep_session_register('easy_discount');}$easy_discount = new easy_discount();// include the mail classes  require(DIR_WS_CLASSES . 'mime.php');  require(DIR_WS_CLASSES . 'email.php');// set the language  if (!tep_session_is_registered('language') || isset($_GET['language'])) {    if (!tep_session_is_registered('language')) {      tep_session_register('language');      tep_session_register('languages_id');    }    include(DIR_WS_CLASSES . 'language.php');    $lng = new language();    if (isset($_GET['language']) && tep_not_null($_GET['language'])) {      $lng->set_language($_GET['language']);    } else {      $lng->get_browser_language();    }    $language = $lng->language['directory'];    $languages_id = $lng->language['id'];  }// include the language translations//$language = 'english';  require(DIR_WS_LANGUAGES . $language . '.php');  // ULTIMATE Seo Urls 5 by FWR Media   if ( !isset($seo_urls) || !is_object($seo_urls) ){     include_once DIR_WS_MODULES . 'ultimate_seo_urls5' . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR . 'usu.php';     $seo_urls = new usu($languages_id, $request_type, $session_started, $SID);   }   $seo_urls->initiate($SID, $languages_id, $language);     // currency  if (!tep_session_is_registered('currency') || isset($_GET['currency']) || ( (USE_DEFAULT_LANGUAGE_CURRENCY == 'true') && (LANGUAGE_CURRENCY != $currency) ) ) {    if (!tep_session_is_registered('currency')) tep_session_register('currency');    if (isset($_GET['currency']) && $currencies->is_set($_GET['currency'])) {      $currency = $_GET['currency'];    } else {      $currency = (USE_DEFAULT_LANGUAGE_CURRENCY == 'true') ? LANGUAGE_CURRENCY : DEFAULT_CURRENCY;    }  }// navigation history + fixif (tep_session_is_registered('navigation')) {    if (PHP_VERSION < 4) {        $broken_navigation = $navigation;        $navigation = new navigationHistory;        $navigation->unserialize($broken_navigation);    } else {        $navigation = new navigationHistory;    }} else {    tep_session_register('navigation');    $navigation = new navigationHistory;}$navigation->add_current_page();// Shopping cart actions  if (isset($_GET['action'])) {// redirect the customer to a friendly cookie-must-be-enabled page if cookies are disabled    if ($session_started == false) {      tep_redirect(tep_href_link(FILENAME_COOKIE_USAGE));    }    if (DISPLAY_CART == 'true') {      $goto =  FILENAME_SHOPPING_CART;      $parameters = array('action', 'cPath', 'products_id', 'pid');    } else {      $goto = basename($PHP_SELF);      if ($_GET['action'] == 'buy_now') {        $parameters = array('action', 'pid', 'products_id');      } else {        $parameters = array('action', 'pid');      }    }    switch ($_GET['action']) {      // customer wants to update the product quantity in their shopping cart      case 'update_product' : for ($i=0, $n=sizeof($_POST['products_id']); $i<$n; $i++) {                                if (in_array($_POST['products_id'][$i], (is_array($_POST['cart_delete']) ? $_POST['cart_delete'] : array()))) {                                  $cart->remove($_POST['products_id'][$i]);                                } else {                                  if (PHP_VERSION < 4) {                                    // if PHP3, make correction for lack of multidimensional array.                                    reset($_POST);                                    while (list($key, $value) = each($_POST)) {                                      if (is_array($value)) {                                        while (list($key2, $value2) = each($value)) {                                          if (ereg ("(.*)\]\[(.*)", $key2, $var)) {                                            $id2[$var[1]][$var[2]] = $value2;                                          }                                        }                                      }                                    }                                    $attributes = ($id2[$_POST['products_id'][$i]]) ? $id2[$_POST['products_id'][$i]] : '';                                  } else {                                    $attributes = ($_POST['id'][$_POST['products_id'][$i]]) ? $_POST['id'][$_POST['products_id'][$i]] : '';                                  }                                  $cart->add_cart($_POST['products_id'][$i], $_POST['cart_quantity'][$i], $attributes, false);                                }                              }                              tep_redirect(tep_href_link($goto, tep_get_all_get_params($parameters)));                              break;      // customer adds a product from the products page      case 'add_product' :    if (isset($_POST['products_id']) && is_numeric($_POST['products_id'])) {                                $cart->add_cart($_POST['products_id'], $cart->get_quantity(tep_get_uprid($_POST['products_id'], $_POST['id']))+$_POST['cart_quantity'], $_POST['id']);                              }                              tep_redirect(tep_href_link($goto, tep_get_all_get_params($parameters)));                              break;      // performed by the 'buy now' button in product listings and review page      case 'buy_now' :        if (isset($_GET['products_id'])) {                                if (tep_has_product_attributes($_GET['products_id'])) {                                  tep_redirect(tep_href_link(FILENAME_PRODUCT_INFO, 'products_id=' . $_GET['products_id']));                                } else {                                  if (isset($_REQUEST['cant'])){                                  	$cant = $_REQUEST['cant'];                                  	$_GET['cant'] = 1;                                  } else {                                  	$cant = 1;                                  	                                  }                                                                $cart->add_cart($_GET['products_id'], $cart->get_quantity($_GET['products_id'])+$cant);                                }                              }                              //tep_redirect(str_replace("&amp;", "&", tep_href_link($goto, tep_get_all_get_params($parameters))));                                tep_redirect('http://www.toolszone.ro/shopping_cart.php');                              break;      case 'notify' :         if (tep_session_is_registered('customer_id')) {                                if (isset($_GET['products_id'])) {                                  $notify = $_GET['products_id'];                                } elseif (isset($_GET['notify'])) {                                  $notify = $_GET['notify'];                                } elseif (isset($_POST['notify'])) {                                  $notify = $_POST['notify'];                                } else {                                  tep_redirect(tep_href_link(basename($PHP_SELF), tep_get_all_get_params(array('action', 'notify'))));                                }                                if (!is_array($notify)) $notify = array($notify);                                for ($i=0, $n=sizeof($notify); $i<$n; $i++) {                                  $check_query = tep_db_query("select count(*) as count from " . TABLE_PRODUCTS_NOTIFICATIONS . " where products_id = '" . $notify[$i] . "' and customers_id = '" . $customer_id . "'");                                  $check = tep_db_fetch_array($check_query);                                  if ($check['count'] < 1) {                                    tep_db_query("insert into " . TABLE_PRODUCTS_NOTIFICATIONS . " (products_id, customers_id, date_added) values ('" . $notify[$i] . "', '" . $customer_id . "', now())");                                  }                                }                                tep_redirect(tep_href_link(basename($PHP_SELF), tep_get_all_get_params(array('action', 'notify'))));                              } else {                                $navigation->set_snapshot();                                tep_redirect(tep_href_link(FILENAME_LOGIN, '', 'SSL'));                              }                              break;      case 'notify_remove' :  if (tep_session_is_registered('customer_id') && isset($_GET['products_id'])) {                                $check_query = tep_db_query("select count(*) as count from " . TABLE_PRODUCTS_NOTIFICATIONS . " where products_id = '" . $_GET['products_id'] . "' and customers_id = '" . $customer_id . "'");                                $check = tep_db_fetch_array($check_query);                                if ($check['count'] > 0) {                                  tep_db_query("delete from " . TABLE_PRODUCTS_NOTIFICATIONS . " where products_id = '" . $_GET['products_id'] . "' and customers_id = '" . $customer_id . "'");                                }                                tep_redirect(tep_href_link(basename($PHP_SELF), tep_get_all_get_params(array('action'))));                              } else {                                $navigation->set_snapshot();                                tep_redirect(tep_href_link(FILENAME_LOGIN, '', 'SSL'));                              }                              break;      case 'cust_order' :     if (tep_session_is_registered('customer_id') && isset($_GET['pid'])) {                                if (tep_has_product_attributes($_GET['pid'])) {                                  tep_redirect(tep_href_link(FILENAME_PRODUCT_INFO, 'products_id=' . $_GET['pid']));                                } else {                                  $cart->add_cart($_GET['pid'], $cart->get_quantity($_GET['pid'])+1);                                }                              }                              tep_redirect(tep_href_link($goto, tep_get_all_get_params($parameters)));                              break;    }  }// include the who's online functions  require(DIR_WS_FUNCTIONS . 'whos_online.php');  tep_update_whos_online();// include the password crypto functions  require(DIR_WS_FUNCTIONS . 'password_funcs.php');// include validation functions (right now only email address)  require(DIR_WS_FUNCTIONS . 'validations.php');// split-page-results  require(DIR_WS_CLASSES . 'split_page_results.php');// infobox  require(DIR_WS_CLASSES . 'boxes.php');// auto activate and expire banners  require(DIR_WS_FUNCTIONS . 'banner.php');  tep_activate_banners();  tep_expire_banners();// auto expire special products  require(DIR_WS_FUNCTIONS . 'specials.php');  tep_expire_specials();// calculate category path  if (isset($_GET['cPath'])) {    $cPath = $_GET['cPath'];  } elseif (isset($_GET['products_id']) && !isset($_GET['manufacturers_id'])) {    $cPath = tep_get_product_path($_GET['products_id']);  } else {    $cPath = '';  }  if (tep_not_null($cPath)) {    $cPath_array = tep_parse_category_path($cPath);    $cPath = implode('_', $cPath_array);    $current_category_id = $cPath_array[(sizeof($cPath_array)-1)];  } else {    $current_category_id = 0;  }// include the breadcrumb class and start the breadcrumb trail  require(DIR_WS_CLASSES . 'breadcrumb.php');  $breadcrumb = new breadcrumb;//  $breadcrumb->add(HEADER_TITLE_TOP, HTTP_SERVER);  $breadcrumb->add(HEADER_TITLE_CATALOG, tep_href_link(FILENAME_DEFAULT));// add category names or the manufacturer name to the breadcrumb trail  if (isset($cPath_array)) {    for ($i=0, $n=sizeof($cPath_array); $i<$n; $i++) {      $categories_query = tep_db_query("select categories_name from " . TABLE_CATEGORIES_DESCRIPTION . " where categories_id = '" . (int)$cPath_array[$i] . "' and language_id = '" . (int)$languages_id . "'");      if (tep_db_num_rows($categories_query) > 0) {        $categories = tep_db_fetch_array($categories_query);        $breadcrumb->add($categories['categories_name'], tep_href_link(FILENAME_DEFAULT, 'cPath=' . implode('_', array_slice($cPath_array, 0, ($i+1)))));      } else {        break;      }    }  } elseif (isset($_GET['manufacturers_id'])) {    $manufacturers_query = tep_db_query("select manufacturers_name from " . TABLE_MANUFACTURERS . " where manufacturers_id = '" . (int)$_GET['manufacturers_id'] . "'");    if (tep_db_num_rows($manufacturers_query)) {      $manufacturers = tep_db_fetch_array($manufacturers_query);      $breadcrumb->add($manufacturers['manufacturers_name'], tep_href_link(FILENAME_DEFAULT, 'manufacturers_id=' . $_GET['manufacturers_id']));    }  }// add the products model to the breadcrumb trail  if (isset($_GET['products_id'])) {    $model_query = tep_db_query("select products_model from " . TABLE_PRODUCTS . " where products_id = '" . (int)$_GET['products_id'] . "'");    if (tep_db_num_rows($model_query)) {      $model = tep_db_fetch_array($model_query);      $breadcrumb->add($model['products_model'], tep_href_link(FILENAME_PRODUCT_INFO, 'cPath=' . $cPath . '&products_id=' . $_GET['products_id']));    }  }// initialize the message stack for output messages  require(DIR_WS_CLASSES . 'message_stack.php');  $messageStack = new messageStack;// set which precautions should be checked  define('WARN_INSTALL_EXISTENCE', 'true');  define('WARN_CONFIG_WRITEABLE', 'true');  define('WARN_SESSION_DIRECTORY_NOT_WRITEABLE', 'true');  define('WARN_SESSION_AUTO_START', 'true');  define('WARN_DOWNLOAD_DIRECTORY_NOT_READABLE', 'true');  require_once(DIR_WS_CLASSES . 'preventDuplicates.php');  $preventDuplicates = new preventDuplicates();/*  $result = mysql_query("SELECT count(orders_id) FROM orders where orders_status=3");$row = mysql_fetch_array($result);if ($row[0] < 100) {	$easy_discount->set('LANS','Discount lansare (10%)',$cart->show_total()*0.10);} else {	$easy_discount->clear('LANS');}*/if (tep_session_is_registered('customer_id')) {	$query = 'SELECT sum(ot.value) FROM orders_total ot left join orders o on o.orders_id=ot.orders_id where ot.class="ot_total" and o.orders_status=3 and customers_id='.$customer_id;	$result = mysql_query($query);	$row = mysql_fetch_array($result);	$total_ordered = $row[0]; //+ $cart->show_total();		if ($total_ordered > 70000) {		$easy_discount->set('DFID','Discount fidelitate (7%)' , $cart->show_total()*0.07);	} elseif($total_ordered > 50000) {		$easy_discount->set('DFID','Discount fidelitate (5%)' , $cart->show_total()*0.05);	} elseif($total_ordered > 20000) {		$easy_discount->set('DFID','Discount fidelitate (3%)' , $cart->show_total()*0.03);	} else {		$easy_discount->clear('DFID');	}  if(isset($_REQUEST['voucher_id'])&&$_REQUEST['voucher_id']!=""){	   $check_query = tep_db_query("SELECT * FROM coupons WHERE coupon_status=1 and coupon_code=".$_REQUEST['voucher_id']);	   $check = tep_db_fetch_array($check_query);  	 if ($check!=null) {       $cust_query = tep_db_query("SELECT * FROM coupon_to_customer WHERE customer_id=".$customer_id." and coupon_id=".$check['coupon_id']);  	   $cust = tep_db_fetch_array($cust_query);    	 if ($cust==null) {         tep_db_query("INSERT INTO coupon_to_customer (coupon_id, customer_id) VALUES (".$check['coupon_id'].",".$customer_id.")");      	 }	   }  }  	$query = tep_db_query("SELECT * FROM coupon_to_customer cc left join coupons c on cc.coupon_id = c.coupon_id WHERE c.coupon_status=1 and cc.customer_id=".$customer_id);	$row = tep_db_fetch_array($query);    $coupon_amount = $row['coupon_amount']; //+ $cart->show_total();  if(isset($coupon_amount) && $coupon_amount>0 && $cart->show_total()>=300){	   $easy_discount->set('VOUC','Voucher (Cod:'.$row['coupon_code'].')',$row['coupon_type']==0?$cart->show_total()*$coupon_amount/100:$coupon_amount);  }} else {	$easy_discount->clear('DFID');	$easy_discount->clear('VOUC');}if($cart->show_total() > 10000){		$easy_discount->set('DVAL','Discount valoare (5%)' , $cart->show_total()*0.05);} elseif($cart->show_total() > 5000){		$easy_discount->set('DVAL','Discount valoare (3%)' , $cart->show_total()*0.03);} else {	$easy_discount->clear('DVAL');}//mystufffunction imagecreatefromfile($path, $user_functions = false){    $info = @getimagesize($path);    if(!$info)    {        return false;    }    $functions = array(        IMAGETYPE_GIF => 'imagecreatefromgif',        IMAGETYPE_JPEG => 'imagecreatefromjpeg',        IMAGETYPE_PNG => 'imagecreatefrompng',        IMAGETYPE_WBMP => 'imagecreatefromwbmp',        IMAGETYPE_XBM => 'imagecreatefromwxbm',    );    if($user_functions)    {        $functions[IMAGETYPE_BMP] = 'imagecreatefrombmp';    }    if(!$functions[$info[2]])    {        return false;    }    if(!function_exists($functions[$info[2]]))    {        return false;    }    return $functions[$info[2]]($path);}function set_thumb($file, $photos_dir, $thumbs_dir , $quality=100, $w=150, $h=50) {    //get image info    list($width, $height, $type, $attr) = getimagesize($photos_dir.$file);    //set dimensions    if($width > $height) {        $width_t=$w;        //respect the ratio        $height_temp=round($height/$width*$w);        if($height_temp>$h){            $height_t=$h;            $width_t=round($width/$height*$h);        }else{            $height_t = $height_temp;        }        //set the offset        $off_y=ceil(($h - $height_t)/2);        $off_x=ceil(($w - $width_t)/2);    }else{        $height_t=$h;        $width_temp=round($width/$height*$h);        if($width_temp>$w){            $width_t=$w;            $height_temp=round($height/$width*$w);        }else{            $width_t = $width_temp;        }        $off_y=ceil(($h - $height_t)/2);        $off_x=ceil(($w - $width_t)/2);    }    $thumb=imagecreatefromfile($photos_dir.$file);    $thumb_p = imagecreatetruecolor($w, $h);    //default background is black    $bg = imagecolorallocate ( $thumb_p, 255, 255, 255 );    imagefill ( $thumb_p, 0, 0, $bg );    imagecopyresampled($thumb_p, $thumb, $off_x, $off_y, 0, 0, $width_t, $height_t, $width, $height);    imagejpeg($thumb_p,$thumbs_dir.$file,$quality);}?>